#!/bin/bash
#
#  Command Line Interface to start all services associated with the Getting-Started Tutorial
#
#  For this tutorial the commands are merely a convenience script to run docker-compose
#

set -e

if (( $# != 1 )); then
    echo "Illegal number of parameters"
    echo "usage: services [create|start|stop]"
    exit 1
fi

loadData () {
    addDatabaseIndex
    waitForOrion
#    docker run --rm -v $(pwd)/import-data:/import-data \
#        --network fiware_default \
#        --entrypoint /bin/ash curlimages/curl import-data
    echo ""
}

stoppingContainers () {
    echo "Stopping containers"
	# down command removes all data !
#    docker-compose --log-level ERROR -p fiware down -v --remove-orphans
	docker-compose --log-level ERROR -p fiware stop
}

displayServices () {
    echo ""
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter name=fiware-*
    echo ""
}

addDatabaseIndex () {
    printf "Adding appropriate \033[1mMongoDB\033[0m indexes for \033[1;34mOrion\033[0m  ..."
    docker exec  db-mongo mongo --eval '
    conn = new Mongo();db.createCollection("orion");
    db = conn.getDB("orion");
    db.createCollection("entities");
    db.entities.createIndex({"_id.servicePath": 1, "_id.id": 1, "_id.type": 1}, {unique: true});
    db.entities.createIndex({"_id.type": 1}); 
    db.entities.createIndex({"_id.id": 1});' > /dev/null

}

waitForOrion () {
    echo -e "\n‚è≥ Waiting for \033[1;34mOrion\033[0m to be available\n"
    while [ `docker run --network fiware_default --rm curlimages/curl -s -o /dev/null -w %{http_code} 'http://orion:1026/version'` -eq 000 ]
    do 
      echo -e "Context Broker HTTP state: " `curl -s -o /dev/null -w %{http_code} 'http://localhost:1026/version'` " (waiting for 200)"
      sleep 1
    done
}



command="$1"
case "${command}" in
    "help")
        echo "usage: services [create|start|stop]"
        ;;
     "start")
        stoppingContainers
        echo -e "Starting five containers \033[1;34mOrion\033[0m, \033[1;34mQuantumLeap\033[0m, a \033[1mGrafana\033[0m metrics dashboard and \033[1mCrateDB\033[0m and \033[1mMongoDB\033[0m databases."
        echo -e "- \033[1;34mOrion\033[0m is the context broker"
        echo -e "- \033[1;34mQuantumLeap\033[0m will write to CrateDB"
        echo -e "- \033[1mGrafana\033[0m will read from CrateDB"
        echo ""
        docker-compose --log-level ERROR -p fiware up -d --remove-orphans
        loadData
        displayServices
        ;;
    "stop")
        stoppingContainers
        ;;
    "loaddata")
        loadData
        ;;
    "create")
        echo "Pulling Docker images"
        docker-compose --log-level ERROR -p fiware pull
        ;;
    *)
        echo "Command not Found."
        echo "usage: services [create|start|stop]"
        exit 127;
        ;;
esac