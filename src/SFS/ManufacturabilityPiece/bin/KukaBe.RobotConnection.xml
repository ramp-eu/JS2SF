<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KukaBe.RobotConnection</name>
    </assembly>
    <members>
        <member name="T:KUKABe.RobotConnection.eRobotConnectionState">
            <summary>
            Status of the RobotConnection
            </summary>
        </member>
        <member name="F:KUKABe.RobotConnection.eRobotConnectionState.Disabled">
            <summary>
            The RobotConnection is disabled
            </summary>
        </member>
        <member name="F:KUKABe.RobotConnection.eRobotConnectionState.Error">
            <summary>
            An error on the RobotConnection occured
            </summary>
        </member>
        <member name="F:KUKABe.RobotConnection.eRobotConnectionState.Unreachable">
            <summary>
            The Robot does not respond on a ping request
            </summary>
        </member>
        <member name="F:KUKABe.RobotConnection.eRobotConnectionState.Testing">
            <summary>
            A test is running to check if Robot is reachable Connection
            </summary>
        </member>
        <member name="F:KUKABe.RobotConnection.eRobotConnectionState.ConnectedUDP">
            <summary>
            The RobotConnection is connected to the robot with an UDP socket
            </summary>
        </member>
        <member name="F:KUKABe.RobotConnection.eRobotConnectionState.ConnectedTCP">
            <summary>
            The RobotConnection is connected to the robot with an TCP socket
            </summary>
        </member>
        <member name="T:KUKABe.RobotConnection.RobotConnection">
             <summary>
             A RobotConnection object will try to make a UDP connection to the Robot Controller, if this fails it will try to make a TCP connection.
             When no connection can be made an exception will be thrown.
             
             Example :
             <code>
                public ProductionScreen()
                {
                  InitializeComponent();
                  MyRobotConnection = new RobotConnection();
                  MyRobotConnection.RaiseError += new KUKABe.RobotConnection.RobotConnection.ErrorEventHandler(RobotConnection_Error);
                  MyRobotConnection.Enabled = true;
                  MyRobotConnection.LocalAddress = "192.168.0.1";
                  MyRobotConnection.RemoteAddress = "192.168.0.2";
                  MyRobotConnection.NetworkTimeout = 2000;
                  MyRobotConnection.RetryAfterError = 3;
                  if (RobotConnection.Enabled)
                  {
                     TestRobotConnection();
                  }
                }
                
                private void RobotConnection_Error(object sender, RunWorkerCompletedEventArgs e)
                {
                  if (e.Error != null)
                  {
                     MessageBox.Show(e.Error.Message);
                  }
                }
            
             
                private void button1_Click(object sender, EventArgs e)
                {
                        
                    try
                    {
                    
                        List&lt;string&gt; VarNameList= new List&lt;string&gt;();
                        List&lt;string&gt; VarValueList = new List&lt;string&gt;();
            
                        for (int i = 1; i &lt;= 20; i++)
                        {
                            VarNameList.Add ("i[ " + i.ToString() + "]");
                            VarValueList.Add ( (i+10).ToString());       
                        }
                        MyRobotConnection.SetMultiVar(VarNameList, VarValueList); 
                    }
                    catch (Exception ex)
                    { 
                        string message = ex.Message;
                        if (ex.InnerException != null)
                        {message = message + ": " + ex.InnerException.Message; }
                        MessageBox.Show(message); 
                    }
                }
            
                private void ProductionScreen_FormClosing(object sender, FormClosingEventArgs e)
                {
                    MyRobotConnection.Dispose();
                    MyRobotConnection = null;
                }
             </code>
             </summary>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.Dispose">
            <summary>
            Method for cleaning up the RobotConnection object
            </summary>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.Start">
            <summary>
            Start the UDP and/or TCP connection thread
            </summary>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.Stop">
            <summary>
            Stop the UDP and/or TCP connection thread
            </summary>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.SendMessage(System.String)">
            <summary>
            Send a string message
            </summary>
            <param name="message">String message to send to the robot.</param>
            <returns>String message recieved from the robot.</returns>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.CheckGeneralMessage(System.String,System.String)">
            <summary>
            Check if the recieved message pairs the send message.
            The xml Element names or checked ;ltNodeName ... --;gt ;ltAckNodeName...
            </summary>
            <param name="sendMessage"></param>
            <param name="recievedMessage"></param>
            <returns>True if check was OK</returns>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.GetVar(System.String,System.String@)">
            <summary>
            Synchronous method to read a KRL variable
            </summary>
            <param name="VarName">KRL variable name ex. "\R1\MyProg\XP1"</param>
            <param name="VarValue">Returned KRL variable value</param>
            <returns></returns>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.SetVar(System.String,System.String)">
            <summary>
            Synchronious method to write an KRL variable
            </summary>
            <param name="VarName">KRL variable name</param>
            <param name="VarValue">New value for the KRL variable</param>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.LoadDirToMem(System.String,System.String)">
            <summary>
            Synchronious method to load KRL Programs in the robot memory
            </summary>
            <param name="Source">Source directory on hard drive</param>
            <param name="Destination">Destination directory in robot memory</param>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.GetMultiVar(System.String[]@,System.String[]@)">
            <summary>
            Synchronious method to read multiple KRL variables
            </summary>
            <param name="VarNameList">List with KRL variable names</param>
            <param name="VarValueList">Returned list with KRL variable names</param>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.SetMultiVar(System.String[]@,System.String[]@)">
            <summary>
            Synchronious method to write multiple KRL variables
            </summary>
            <param name="VarNameList">List with KRL variable names</param>
            <param name="VarValueList">List with new values for the KRL variables</param>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.GetJobList(System.String[]@,System.Int32[]@)">
            <summary>
            Method for reading the current joblist, create the corresponding program and load it into memory.
            </summary>
            <param name="JobNameList">Returned list with jobs from the joblist</param>
            <param name="ExecutionCountList">Returned list with numbers who serve as parameter for the coresponding jobs</param>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.SetJoblist(System.String[]@,System.Int32[]@)">
            <summary>
            Method for writing the current joblist, create the corresponding program and load it into memory.
            </summary>
            <param name="JobNameList">List with jobs for the joblist ex. "demo Job\My_Job.job"</param>
            <param name="ExecutionCountList">List with numbers who serve as parameter for the coresponding job</param>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.SaveJobslist">
            <summary>
            Save the currently loaded jobs from robot memory to the hard drive
            </summary>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.GetFilterSettings(System.String[]@,System.String[]@,System.String[]@)">
            <summary>
            Method for reading the settings of the SocketFilter.ini file on the robot controller
            </summary>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.TestConnection">
            <summary>
            Method for testing the RobotConnection with detailed trouble shooting information in the thrown exception message
            This Method can be used for trouble shooting
            </summary>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.Build_ShowVar_SendString(System.String)">
            <summary>
            Create the xml for the ShowVar send telegram.
            </summary>
            <param name="VarName">KRL variable name</param>
            <returns>Generated xml</returns>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.Build_SetVar_SendString(System.String,System.String)">
            <summary>
            Create the xml for the ShowVar send telegram.
            </summary>
            <param name="VarName">KRL variable name</param>
            <param name="VarValue">KRL variable value</param>
            <returns>Generated xml</returns>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.Build_LoadDirToMem_SendString(System.String,System.String)">
            <summary>
            Create the xml for the LoadDirToMem send telegram.
            </summary>
            <param name="Source">Source directory on harddrive.</param>
            <param name="Destination">Destination directory on Robot memory.</param>
            <returns>Generated XML</returns>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.Build_ShowMultiVar_SendString(System.String[])">
            <summary>
             Create the xml for the ShowMultiVar send telegram.
            </summary>
            <param name="VarNameList">KRL variable names</param>
            <returns>Generated xml</returns>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.Build_SetMultiVar_SendString(System.String[],System.String[])">
            <summary>
             Create the xml for the SetMultiVar send telegram.
            </summary>
            <param name="VarNameList">KRL variable names</param>
            <param name="VarValueList">KRL variable values</param>
            <returns></returns>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.Build_GetJobList_SendString">
            <summary>
             Create the xml for the GetLobList send telegram.
            </summary>
            <returns>Generated xml</returns>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.Build_SetJobList_SendString(System.String[],System.Int32[])">
            <summary>
             Create the xml for the SetJobList send telegram.
            </summary>
            <param name="JobNameList">Name of the jobs that must be set in the job list.</param>
            <param name="ExecutionCountList">Execution count values for the jobs.</param>
            <returns>Generated xml</returns>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.Build_SaveJobslist_SendString">
            <summary>
             Create the xml for the SaveJobList send telegram.
            </summary>
            <returns>Generated xml</returns>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.Build_GetFilterSettings_SendString">
            <summary>
             Create the xml for the GetFilterSettings send telegram.
            </summary>
            <returns>Generated xml</returns>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.Parse_ShowVar_RecieveString(System.String,System.String,System.String@)">
            <summary>
            Parse a AckShowVar telegram
            </summary>
            <param name="RecievedMessage">Recieved xml telegram</param>
            <param name="VarName">KRL varname</param>
            <param name="VarValue">KRL varvalue</param>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.Parse_SetVar_RecieveString(System.String,System.String,System.String)">
            <summary>
            Parse a AckSetVar telegram
            </summary>
            <param name="RecievedMessage">Recieved xml telegram</param>
            <param name="VarName">KRL varname</param>
            <param name="VarValue">KRL varvalue</param>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.Parse_ShowMultiVar_RecieveString(System.String,System.String[],System.String[]@)">
            <summary>
            Parse a AckShowMultiVar telegram
            </summary>
            <param name="RecievedMessage">Recieved xml telegram</param>
            <param name="VarNameList">KRL variable names</param>
            <param name="VarValueList">KRL variable values</param>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.Parse_LoadDirToMem_RecieveString(System.String)">
            <summary>
            Parse a AckLoadDirToMem telegram
            </summary>
            <param name="RecievedMessage">Recieved xml telegram</param>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.Parse_SetMultiVar_RecieveString(System.String,System.String[],System.String[])">
            <summary>
            Parse a SetMultivar telegram
            </summary>
            <param name="RecievedMessage">Recieved xml telegram</param>
            <param name="VarNameList">KRL variable names</param>
            <param name="VarValueList">KRL variable new values</param>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.Parse_GetJobList_RecieveString(System.String,System.String[]@,System.Int32[]@)">
            <summary>
            Parse a AckGetJobList telegram
            </summary>
            <param name="RecievedMessage">Recieved xml telegram</param>
            <param name="JobNameList">Names of the jobs in the joblist</param>
            <param name="ExecutionCountList">Execution counter values of the jobs</param>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.Parse_SetJobList_RecieveString(System.String)">
            <summary>
            Parse a AckJobList telegram
            </summary>
            <param name="RecievedMessage">Recieved xml telegram</param>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.Parse_SaveJobslist_RecieveString(System.String)">
            <summary>
            Parse a AckSaveJobList telegram
            </summary>
            <param name="RecievedMessage">Recieved xml telegram</param>
        </member>
        <member name="M:KUKABe.RobotConnection.RobotConnection.Parse_GetFilterSettings_RecieveString(System.String,System.String[]@,System.String[]@,System.String[]@)">
            <summary>
            Parse a AckShowFilterSettings telegram
            </summary>
            <param name="RecievedMessage">Recieved xml telegram</param>
            <param name="RemoteEndPointList">List with remote IP number that have permision to acces the socket interface.</param>
            <param name="ReadableKRLVarList">List with KRL variable names that may be read over the socket interface</param>
            <param name="WritableKRLVarList">List with KRL variable names that may be written over the socket interface</param>
        </member>
        <member name="E:KUKABe.RobotConnection.RobotConnection.ErrorRaised">
            <summary>
            Reports error during the asynchronious test connection command. 
            </summary>
        </member>
        <member name="E:KUKABe.RobotConnection.RobotConnection.StateChanged">
            <summary>
            Reports connection status changed
            </summary>
        </member>
        <member name="P:KUKABe.RobotConnection.RobotConnection.Name">
            <summary>
            Name for the robot Connection
            </summary>
        </member>
        <member name="P:KUKABe.RobotConnection.RobotConnection.Enabled">
            <summary>
            Enable the robot connection
            </summary>
        </member>
        <member name="P:KUKABe.RobotConnection.RobotConnection.LocalAddress">
            <summary>
            Local IP-address or Host name
            </summary>
        </member>
        <member name="P:KUKABe.RobotConnection.RobotConnection.RemoteAddress">
            <summary>
            Remote IP-address or Host name
            </summary>
        </member>
        <member name="P:KUKABe.RobotConnection.RobotConnection.UDP_State">
            <summary>
            Connection status of the UDP socket
            </summary>
        </member>
        <member name="P:KUKABe.RobotConnection.RobotConnection.UDP_Used">
            <summary>
            Option to disable UDP protokol
            </summary>
        </member>
        <member name="P:KUKABe.RobotConnection.RobotConnection.UDP_LocalPort">
            <summary>
            Local portnumber for UDP socket connection
            </summary>
        </member>
        <member name="P:KUKABe.RobotConnection.RobotConnection.UDP_RemotePort">
            <summary>
            Remote portnumber for UDP socket connection
            </summary>
        </member>
        <member name="P:KUKABe.RobotConnection.RobotConnection.TCPState">
            <summary>
            Connection status of the TCP socket
            </summary>
        </member>
        <member name="P:KUKABe.RobotConnection.RobotConnection.TCP_Used">
            <summary>
            Option to disable TCP protokol
            </summary>
        </member>
        <member name="P:KUKABe.RobotConnection.RobotConnection.TCP_LocalPort">
            <summary>
            Local portnumber for TCP socket connection
            </summary>
        </member>
        <member name="P:KUKABe.RobotConnection.RobotConnection.TCP_RemotePort">
            <summary>
            Remot portnumber for TCP socket connection
            </summary>
        </member>
        <member name="P:KUKABe.RobotConnection.RobotConnection.NetworkTimeout">
            <summary>
            Timeout for network communication in ms
            </summary>
        </member>
        <member name="P:KUKABe.RobotConnection.RobotConnection.RetryAfterError">
            <summary>
            Number of retry after bad communication
            </summary>
        </member>
        <member name="P:KUKABe.RobotConnection.RobotConnection.ConnectionStatus">
            <summary>
            State of the RobotConnection
            </summary>
        </member>
        <member name="T:KUKABe.RobotConnection.RobotConnection.ErrorEventHandler">
            <summary>
             Reports error during asynchronious test connection command.
            </summary>
            <param name="sender">Object that raised the error.</param>
            <param name="e">RunWorkerCompletedEventArgs</param>
        </member>
        <member name="T:KUKABe.RobotConnection.RobotConnection.StateChangedHandler">
            <summary>
            Reports connection status changed
            </summary>
            <param name="sender">Object that raised the connection state changed</param>
            <param name="newstate">New connection status</param>
        </member>
    </members>
</doc>
